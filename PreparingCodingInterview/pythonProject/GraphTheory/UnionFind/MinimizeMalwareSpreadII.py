from typing import List, DefaultDict, Set
from collections import defaultdict

class DisjointSetUnion:
    def __init__(self,n: int,  initial: List[int]):
        self.n: int = n
        self.root: List[bool] = [True if u in initial else False for u in range(n)]
        self.label: List[Set[int]] = [set() if not self.root[u] else {u} for u in range(n)]
        self.total: List[int] = [1] * n
        self.par: List[int] = list(range(n))

    def find(self, u: int) -> int:
        if self.par[u] == u:
            return u

        self.par[u] =self.find(self.par[u])

        return self.par[u]

    def join(self, u: int, v: int) -> bool:

        if self.root[u] and self.root[v]:
            return False
        elif self.root[u]:
            par_v = self.find(v)
            self.label[par_v].add(u)
            return False
        elif self.root[v]:
            par_u = self.find(u)
            self.label[par_u].add(v)
            return False

        par_u, par_v = self.find(u), self.find(v)

        if par_u == par_v:
            return False

        self.total[par_u] += self.total[par_v]
        self.par[par_v] = par_u
        self.label[par_u] |= self.label[par_v]
        return True

class MinMalwareSpreadIISolution:
    def __init__(self, graph: List[List[int]], initial: List[int]):
        self.g: List[List[int]] = graph

        self.initial: List[int] = sorted(initial)

    def solve(self) -> int:

        n = len(self.g)
        dsu: DisjointSetUnion = DisjointSetUnion(n, self.initial)
        for u in range(n):
            for v in range(u+1, n):
                if self.g[u][v] == 0:
                    continue
                dsu.join(u, v)

        max_total = -1
        arg_max = -1

        force: DefaultDict[int, set] = defaultdict(set)

        for u in range(n):
            par_u = dsu.find(u)

            if len(dsu.label[par_u]) != 1:
                continue
            force[dsu.label[par_u].pop()].add(par_u)

        for u in self.initial:
            total_u = sum(dsu.total[v] for v in force[u])

            if total_u > max_total:
                arg_max = u
                max_total = total_u

        return arg_max


if __name__ == '__main__':
    graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]]
    initial = [0,1]

    print(MinMalwareSpreadIISolution(graph, initial).solve())



